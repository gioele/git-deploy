#!/bin/bash

USAGE="Usage: `basename $0` [-afh] sshpath [remotename]"

# we want at least one parameter (it may be a flag or an argument)
if [ $# -eq 0 ]; then
	echo $USAGE >&2
	exit 1
fi

AUTOPUSH=0
OVERWRITE_REMOTE='false'

# parse command line arguments
while getopts afh OPT; do
    case "$OPT" in
	h)	echo $USAGE
		exit 0
		;;
	a)	AUTOPUSH=1
		;;
	f)      OVERWRITE_REMOTE='true'
		;;
	\?)	# getopts issues an error message
		echo $USAGE >&2
		exit 1
		;;
    esac
done

shift $(( $OPTIND - 1 ))

# read arguments

SSH_PATH="$1"

if [[ -n "$2" ]] ; then
    REMOTE=$2
else
    REMOTE="origin"
fi


# deduce paths and repo names

SRC_DIR=`pwd`
SRC_REPO_NAME=`basename "$SRC_DIR"`
DEST_REPO_NAME="${SRC_REPO_NAME/ /\\ }.git"
DEST_DIR="$SRC_DIR.git"


# check whether we are in the root dir of a git-managed repository

if [[ ! -d "$SRC_DIR/.git" ]] ; then
    echo "ERROR: Directory '$SRC_DIR/.git' not found." >&2
    echo "ERROR: '$SRC_DIR' does not appear to be a git repository." >&2
    exit 1
fi


# check whether a remote with a similar name exists

git remote | grep -q "^${REMOTE}$"
remote_exists=$?

if [ $remote_exists -eq 0 -a $OVERWRITE_REMOTE = 'false' ] ; then
    echo "ERROR: Remote '$REMOTE' already defined."
    echo "Use '-f' to force its replacement or use a different remote name" >&2
    exit 1
fi


# create a remote copy of the repo

git clone --bare "$SRC_DIR" "$DEST_DIR"
scp -r "$DEST_DIR" "$SSH_PATH"

rm -rf "$DEST_DIR"


# save info about the remote repo

git config remote.$REMOTE.url "$SSH_PATH/$DEST_REPO_NAME"
git config remote.$REMOTE.fetch "+refs/heads/*:refs/remotes/$REMOTE/*"

if [[ "$REMOTE" == "origin" ]] ; then
	git config branch.master.remote $REMOTE
fi

git config branch.master.merge refs/heads/master


# record auto push settings

if [[ $AUTOPUSH == 1 ]] ; then
	echo "Enablishing auto push on commit"
	echo "git push $REMOTE" >> .git/hooks/post-commit
	chmod +x .git/hooks/post-commit
fi

exit;
