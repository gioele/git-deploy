#!/bin/sh

USAGE="Usage: `basename $0` [-afh] user@host/path/ [remotename]"

AUTOPUSH='false'
OVERWRITE_REMOTE='false'

# parse command line arguments
while getopts afh OPT; do
    case "$OPT" in
	h)	echo $USAGE
		exit 0
		;;
	a)	AUTOPUSH='true'
		;;
	f)      OVERWRITE_REMOTE='true'
		;;
	\?)	# getopts issues an error message
		echo $USAGE >&2
		exit 1
		;;
    esac
done

shift $(( $OPTIND - 1 ))


# check that at least the SSH path has been specified

if [ $# -eq 0 ]; then
	echo "ERROR: No sshpath specified" >&2
	echo $USAGE >&2
	exit 1
fi


# read arguments

SSH_LOCATION="$1"
REMOTE="${2:-origin}"


# deduce paths and repo names

SRC_DIR=`pwd`
SRC_REPO_NAME=`basename "$SRC_DIR"`
DEST_REPO_NAME="$SRC_REPO_NAME.git"

SSH_HOST=`echo $SSH_LOCATION | cut -d '/' -f 1`
SSH_BASE_DIR="/`echo $SSH_LOCATION | cut -d '/' -f 2-`"
SSH_REMOTE_DIR="$SSH_BASE_DIR/$DEST_REPO_NAME"

# check whether we are in the root dir of a git-managed repository

if [ ! -d "$SRC_DIR/.git" ] ; then
    echo "ERROR: Directory '$SRC_DIR/.git' not found." >&2
    echo "ERROR: '$SRC_DIR' does not appear to be a git repository." >&2
    exit 1
fi


# check whether a remote with a similar name exists

git remote | grep -q "^${REMOTE}$"
remote_exists=$?

if [ $remote_exists -eq 0 -a $OVERWRITE_REMOTE = 'false' ] ; then
    echo "ERROR: Remote '$REMOTE' already defined."
    echo "Use '-f' to force its replacement or use a different remote name" >&2
    exit 1
fi


# prepare the remote repo

ssh "$SSH_HOST" "mkdir -p '$SSH_REMOTE_DIR' ; cd '$SSH_REMOTE_DIR' ; git init --bare"
if [ ! $? -eq 0 ] ; then
	echo "ERROR: Something went wrong during the remote repository setup!" >&2
	exit 1
fi


# save info about the remote repo

git config remote.$REMOTE.url "git+ssh://$SSH_LOCATION/$DEST_REPO_NAME"
git config remote.$REMOTE.fetch "+refs/heads/*:refs/remotes/$REMOTE/*"

if [ "$REMOTE" = "origin" ] ; then
	git config branch.master.remote $REMOTE
fi

git config branch.master.merge refs/heads/master


# push a copy to the remote repo

git push $REMOTE


# record auto push settings

if [ "$AUTOPUSH" = 'true' ] ; then
	echo "Enablishing auto push on commit"
	auto_push_cmd="git push $REMOTE"
	hook_file=".git/hooks/post-commit"
	touch $hook_file
	if grep -q "^$auto_push_cmd$" "$hook_file" ; then
		echo "Autopush already configured for $REMOTE"
	else
		echo "$auto_push_cmd" >> "$hook_file"
		chmod +x "$hook_file"
	fi
fi
